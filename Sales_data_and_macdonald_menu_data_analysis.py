# -*- coding: utf-8 -*-
"""OASISINFOBYTE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18_YuQ-5IKKsuCSMtg3ADE7yGCb-0yddM

### 1. ***Idea: Exploratory Data Analysis (EDA) on Retail Sales Data*** bold text

lINK1: https://www.kaggle.com/datasets/mohammadtalib786/retail-sales-dataset?resource=download

   Link2: https://www.kaggle.com/datasets/mcdonalds/nutrition-facts
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

import warnings

# Load the datasets
sales_data = pd.read_csv("/content/retail_sales_dataset.csv")
menu_data = pd.read_csv("/content/menu.csv")

"""RETAIL_SALES_DATASET ANALYSIS"""

# frist rows and last rows
pd.concat([sales_data.head(), sales_data.tail()])

# information about dataset
sales_data.info()

# column convert to lowercase format and space replace with (_)
sales_data.columns = sales_data.columns.str.lower().str.replace(' ', '_')

"""Descriptive Statistics: Calculate basic statistics (mean, median, mode, standard deviation)."""

# summary statistics
sales_data.describe()

# Remove duplicates
sales_data.drop_duplicates(inplace=True)

# change date data type
sales_data['date'] = pd.to_datetime(sales_data['date'])

# change gender data type
sales_data['gender'] = sales_data['gender'].astype('category')

# change product_category data type
sales_data['product_category'] = sales_data['product_category'].astype('category')

sales_data.dtypes

# remove transaction_id which is not useful our analysis
sales_data.drop('transaction_id', axis=1, inplace=True)

# copy dataframe
tem_df = sales_data.copy()

"""Customer and Product Analysis: Analyze customer demographics and purchasing behavior."""

# date
tem_df['date'].describe()

# gender column frequency
sales_data['gender'].value_counts()

# pie chart
sales_data['gender'].value_counts().plot(kind='pie', autopct='%.2f%%', colors=['blue', 'red'])

# frequency of product_category
tem_df['product_category'].value_counts()

tem_df['product_category'].value_counts().plot(kind='hist', color='green')

# descriptive stats
tem_df['age'].describe()

# distribution
tem_df['age'].plot(kind='hist')

# skew score
tem_df['age'].skew()

# descriptive stats
tem_df['quantity'].describe()

warnings.filterwarnings('ignore')
tem_df['quantity'].value_counts().plot(kind='bar')

# descriptive stats
tem_df['price_per_unit'].describe()

sns.histplot(tem_df, x='price_per_unit')
plt.show()

# stats
tem_df['total_amount'].describe()

plt.figure(figsize=(6,3))
sns.histplot(tem_df['total_amount'])
plt.title('Total Amount Distribution')
plt.show()

"""Visualization: Present insights through bar charts, line plots, and heatmaps."""

# scatterplot between age and total_amount
sns.scatterplot(tem_df, x='age', y='total_amount')

tem_df['age'].corr(sales_data['total_amount'])

# scatterplot between price_per_unit and total_amount
sns.scatterplot(tem_df, x='price_per_unit', y='total_amount')

# corr score
tem_df['price_per_unit'].corr(sales_data['total_amount'])

sns.scatterplot(tem_df, x='quantity', y='total_amount')

tem_df['quantity'].corr(sales_data['total_amount'])

# gender and product category
pd.crosstab(sales_data['gender'], sales_data['product_category'])

# gender and quantity
pd.crosstab(sales_data['gender'], sales_data['quantity'])

# product_category and quantity
pd.crosstab(sales_data['product_category'], sales_data['quantity'])

pd.crosstab(sales_data['gender'], sales_data['price_per_unit'])

sns.boxplot(tem_df, x='gender', y='total_amount')

sns.boxplot(tem_df, x='product_category', y='total_amount')

sns.boxplot(tem_df, x='price_per_unit', y='total_amount')

sns.boxplot(tem_df, x='quantity', y='total_amount')

sns.boxplot(tem_df, x='product_category', y='total_amount', hue='gender')

sns.boxplot(tem_df, x='price_per_unit', y='total_amount', hue='gender')

tem_df.groupby(['price_per_unit','gender'])['total_amount'].describe()

"""Time Series Analysis: Analyze sales trends over time using time series techniques."""

# average montly sales
monthly_window = tem_df['total_amount'].resample('M').mean()
print(monthly_window)
monthly_window.plot()

import matplotlib.pyplot as plt

# Assuming tem_df is your DataFrame with datetime index
# Set datetime index if not already set
tem_df.set_index('date', inplace=True)

# Resample the data on a monthly basis and calculate the mean total_amount
monthly_mean = tem_df['total_amount'].resample('M').mean()

# Plotting
monthly_mean.plot()

# Adding labels and title
plt.xlabel('Date')
plt.ylabel('Mean Total Amount')
plt.title('Mean Total Amount Over Time (Monthly)')

# Display the plot
plt.show()

import matplotlib.pyplot as plt

# Assuming tem_df is your DataFrame with datetime index
# Check if the index is already set to datetime
if not isinstance(tem_df.index, pd.DatetimeIndex):
    # If not, convert the 'date' column to datetime index
    tem_df['date'] = pd.to_datetime(tem_df['date'])
    tem_df.set_index('date', inplace=True)

# Resample the data on a quarterly basis and calculate the mean total_amount
quarterly_window = tem_df['total_amount'].resample('Q').mean()

# Plotting
quarterly_window.plot()

# Adding labels and title
plt.xlabel('Date')
plt.ylabel('Mean Total Amount')
plt.title('Mean Total Amount Over Time (Quarterly)')

# Display the plot
plt.show()

"""the quarterly total amounts data from January 2023 to January 2024. You've identified fluctuations in the total amounts over the months, indicating some level of volatility. Additionally, you've pointed out notable spikes in February 2023 and January 2024, which could signify potential outliers or significant events during those months.

The absence of a clear, consistent pattern suggests potential irregularity in the underlying factors affecting the total amounts. Further analysis could help identify the drivers behind these fluctuations and spikes, providing valuable insights for forecasting future total amounts.

In conclusion, the data exhibits a mix of trends, fluctuations, and spikes, emphasizing the importance of deeper analysis to understand the dynamics influencing the total amounts over the months.

Fluctuations with Overall Increasing Trend: The data shows fluctuations with an overall increasing trend over the quarters, indicating potential growth in total amounts during this period.

Variability Across Quarters: There is variability in the total amounts across the quarters, suggesting potential seasonal patterns or cyclical behavior influencing the total amounts each quarter.

Notable Spike in Last Quarter: A notable spike is observed in the last quarter, indicating a significant increase in total amounts during that period. This spike could be indicative of exceptional events or other influencing factors.

Potential Seasonal Patterns: The data suggests potential seasonal patterns influencing the total amounts, further emphasizing the need to explore seasonal variations.

Opportunity for Forecasting: Given the observed trends and fluctuations, the data presents an opportunity for forecasting future total amounts, which could be valuable for planning and decision-making.

Need for Further Analysis: In conclusion, the data reveals growth, seasonal variations, and a notable spike, highlighting the importance of further analysis to uncover the drivers behind these patterns and to better understand the underlying factors influencing total amounts over the quarters.

MENU ANALYSIS
"""

menu_data = pd.read_csv("/content/menu.csv")

menu_data.head()

#code outputs the dimension of the python object. Output 260 rows and 24 columns
menu_data.shape

#Graph for Number of Menu Items for each Catagory
plt.figure(figsize=(10, 4), dpi=100) #Input plot size
menu_category = menu_data.Category.value_counts() #import data
menu_category.plot.bar(color = ['blue','red','green','black','orange','brown','grey','pink','skyblue']) #graph color
plt.title("Number of Menu Items for each Food Catagory") # Graphs Main Label on the Top
plt.ylabel("Number of Item's") # Y-plot Label
plt.xlabel("Category") # X-plot Label
plt.xticks(rotation=45) #angle of x-plot Label
plt.show() #display results

#Plot graph for relationship between Calories vs Calories from Fat
plt.figure(figsize=(10, 4), dpi=100) #Input plot size

correlation = menu_data['Calories'].corr(menu_data['Calories from Fat']) #Graph Size
plt.scatter(menu_data.Calories, menu_data['Calories from Fat'], color='blue') #Get scatterplot, data, and plot color
plt.text(500,450, 'r = {}'.format(round(correlation,2)))
plt.xlabel("Calories")
plt.ylabel("Calories form Fat")
plt.title("The Relationship Between Calories vs Calories from Fat")
plt.show()

#Bar Graph for Percent of Trans Fat
plt.figure (figsize=(10, 4), dpi=100) #input plot size
menu_category = menu_data.groupby('Category')['Trans Fat'].mean()
menu_category.plot.bar(color = ['blue','red','green','black','orange','brown','grey','pink','skyblue'])
plt.title("Percent of Trans Fat")
plt.xlabel("Trans Fat")
plt.ylabel("Categories")
plt.xticks(rotation=90)
plt.show()

menu_data.groupby('Category')['Trans Fat'].mean() # Trans Fat Categories

menu_data['saturated_cholesterol'] = menu_data['Saturated Fat']/menu_data['Cholesterol']*100

saturated_cholesterol = menu_data.groupby('Category')['saturated_cholesterol'].mean().dropna().nlargest(5)

#Bar Graph for Percent of Saturated Fat
plt.figure(figsize=(10, 4), dpi=100)
saturated_cholesterol.sort_values(ascending=False).plot.bar(color = 'blue')
plt.title("Top 5 Categories that have the Highest Percent of Saturated Fat")
plt.ylabel("Percent")
plt.xlabel("Menu Category")
plt.xticks(rotation=90)
plt.show();

#Saturated Cholesterol Data
coffee_tea = menu_data[menu_data.Category == 'Coffee & Tea']
coffee_tea.groupby('Item')['saturated_cholesterol'].mean().sort_values(ascending=False)

shakes = menu_data[menu_data.Category == 'Smoothies & Shakes']
shakes.groupby('Item')['saturated_cholesterol'].mean().sort_values()

beef_pork = menu_data[menu_data.Category == 'Beef & Pork']
beef_pork.groupby('Item')['saturated_cholesterol'].mean().sort_values()

chicken_fish = menu_data[menu_data.Category == 'Chicken & Fish']
chicken_fish.groupby('Item')['saturated_cholesterol'].mean().sort_values()

menu_data.groupby('Category')['Vitamin A (% Daily Value)'].mean()

menu_data.groupby('Category')['Vitamin C (% Daily Value)'].mean()

beverage = menu_data[menu_data.Category == 'Beverages']
beverage.groupby('Item')['Vitamin C (% Daily Value)'].mean().sort_values()

iron = menu_data.groupby('Category')['Iron (% Daily Value)'].mean()
calcium = menu_data.groupby('Category')['Calcium (% Daily Value)'].mean()

plt.figure(figsize=(10, 4), dpi=100)

category = iron.index
Iron = iron.values
Calcium = calcium.values

X_axis = np.arange(len(category))

plt.bar(X_axis - 0.2, Iron, 0.4, label = 'Iron', color = 'green')
plt.bar(X_axis + 0.2, Calcium, 0.4, label = 'Calcium', color = 'grey')

plt.xticks(X_axis, category)
plt.xlabel("Menu Categories")
plt.title("Distribution of Iron and Calcium in McDonald's Foods")
plt.xticks(rotation=45)
plt.legend()
plt.show()

"""There are 9 categories:

Coffee and Tea
Breakfast
Smoothies and Shakes
Chicken and Fish
Beverages
Beef and Pork
Snacks and Sides
Desserts
Salads
Within these categories, there are 260 different items.


**
* We define the categories and their corresponding trans fat and saturated fat content.

* We use matplotlib to create bar charts representing the trans fat and saturated fat content in different categories.

* The values used in the example are placeholders and should be replaced with actual data.

* These visualizations will help illustrate the trans fat and saturated fat content across different food categories, aiding in understanding their distribution and potential impact on health.

**
* We define the categories and their corresponding concentrations of Vitamin A and Vitamin C.

* We use matplotlib to create bar charts representing the concentration of Vitamin A and Vitamin C in different food categories.

* The values used in the example are placeholders and should be replaced with actual data.

These visualizations will help illustrate the concentration of Vitamin A and Vitamin C across different food categories, aiding in understanding their nutritional content and potential health benefits.


1. Calcium and Iron Content:

* Shakes, coffee, and tea are rich in calcium but low in iron.
* Menu categories rich in animal protein, such as beef & pork and chicken & fish, are rich in both iron and calcium.
* McDonald's beverages are very low in calcium and iron.

2. Vitamins:
* McDonald's menu offers a variety of foods abundant in essential vitamins, particularly Vitamin A and C, with salads being a particularly rich source.

3. Nutritional Considerations:
* Many menu items are low in carbohydrates and contain little to no trans-fat, which is positive.
* However, several foods are high in saturated fat. It's advisable to select options with low saturated fat content, aiming for less than 10% of daily calorie intake.

4. Minerals:
* Foods containing milk or animal protein tend to be rich in calcium, providing a valuable source of this mineral.

This analysis provides valuable insights into the nutritional composition of McDonald's menu offerings, helping individuals make informed choices based on their personal preferences or specific nutritional requirements. It highlights the diversity of options available and underscores the importance of considering various nutrients when making food choices.

Level:2
"""